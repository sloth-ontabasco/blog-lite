openapi: 3.0.0
info:
  title: Blog Lite API Documentation
  version: 1.0.0
  description: |
    <h2> Error Codes </h2>  <table>
      <thead>
        <th>Resource</th>
        <th>Error Code</th>
        <th>Message</th>
      </thead>
      <tbody>
      <tr>
        <td>User</td>
        <td>S1</td>
        <td>No users found for search</td>
      </tr>
      <tr>
        <td>User</td>
        <td>U1</td>
        <td>username is required</td>
      </tr>
      <tr>
        <td>User</td>
        <td>U2</td>
        <td>name is required</td>
      </tr>
      <tr>
        <td>User</td>
        <td>U3</td>
        <td>password is required</td>
      </tr>
      <tr>
        <td>User</td>
        <td>U4</td>
        <td>User already exists</td>
      </tr>
      <tr>
        <td>User</td>
        <td>U5</td>
        <td>update is non existant</td>
      </tr>
      <tr>
        <td>User</td>
        <td>U6</td>
        <td>No user found to update</td>
      </tr>
      <tr>
        <td>User</td>
        <td>U7</td>
        <td>Author ID not same as user ID</td>
      </tr>
      <tr>
        <td>User</td>
        <td>U8</td>
        <td>user already exists for updatetd</td>
      </tr>
      <tr>
        <td>User</td>
        <td>F1</td>
        <td>Username is not found for follow</td>
      </tr>
      <tr>
        <td>User</td>
        <td>F2</td>
        <td>follower does not exist</td>
      </tr>
      <tr>
        <td>User</td>
        <td>F3</td>
        <td>followed does not exist</td>
      </tr>
      <tr>
        <td>User</td>
        <td>F4</td>
        <td>cannot follow self</td>
      </tr>
      <tr>
        <td>User</td>
        <td>UF1</td>
        <td>Username is not found for unfollow</td>
      </tr>
      <tr>
        <td>User</td>
        <td>UF2</td>
        <td>follower does not exist</td>
      </tr>
      <tr>
        <td>User</td>
        <td>UF3</td>
        <td>followed does not exist</td>
      </tr>
      <tr>
        <td>User</td>
        <td>UF4</td>
        <td>cannot unfollow self</td>
      </tr>
      <tr>
        <td>Post</td>
        <td>P1</td>
        <td>Post does not exist</td>
      </tr>
      <tr>
        <td>Post</td>
        <td>P2</td>
        <td>Author ID is required</td>
      </tr>
      <tr>
        <td>Post</td>
        <td>P3</td>
        <td>title is required</td>
      </tr>
      <tr>
        <td>Post</td>
        <td>P4</td>
        <td>description is required</td>
      </tr>
      <tr>
        <td>Post</td>
        <td>P5</td>
        <td>Author ID does not exist</td>
      </tr>
      <tr>
        <td>Post</td>
        <td>P6</td>
        <td>Invalid Post</td>
      </tr>
      <tr>
        <td>Post</td>
        <td>P7</td>
        <td>Invalid user</td>
      </tr>
      <tr>
        <td>Post</td>
        <td>P8</td>
        <td>Author has not made the post</td>
      </tr>
      <tr>
        <td>Post</td>
        <td>P9</td>
        <td>title and content has not made the post</td>
      </tr>
      <tr>
        <td>Post</td>
        <td>P10</td>
        <td>Invalid Post</td>
      </tr>
      <tr>
        <td>Post</td>
        <td>C1</td>
        <td>Invalid Post ID</td>
      </tr>
      <tr>
        <td>Post</td>
        <td>C2</td>
        <td>Content field required</td>
      </tr>
      <tr>
        <td>Post</td>
        <td>C3</td>
        <td>Author field required</td>
      </tr>
      <tr>
        <td>Post</td>
        <td>L1</td>
        <td>Author ID required</td>
      </tr>
      <tr>
        <td>Post</td>
        <td>L2</td>
        <td>Invalid Post ID</td>
      </tr>
      </tbody>
    </table>
paths:
  /api/user/{username}:
    description: End point to perform read on user
    get:
      tags:
        - User
      description: Operation to get the user details
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
            example: sloth
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: sloth
                  name:
                    type: string
                    example: siddharth 
                  password:
                    type: string
                    example: passtest
                  created_on:
                    type: string
                    example: 2022-09-19 10:34
        '404':
          description: User not found
    put:
      tags:
        - User
      description: Operation to edit user details
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
            example: sloth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                author_id:
                  type: integer
                  example: 2
                password:
                  type: string
                  example: "newpass"
                username:
                  type: string
                  example: "newsloth"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: newsloth
                  name:
                    type: string
                    example: siddharth 
                  password:
                    type: string
                    example: newpass
                  created_on:
                    type: string
                    example: 2022-09-19 10:34
        '400':
          description: Bad Request, usually invalid body
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  error_code:
                    type: string
                    example: BE001
                  error_message:
                    type: string
                    example: Invalid Username
        '401':
          description: Forbidden, author ID does not match with user ID
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  error_code:
                    type: string
                    example: BE002
                  error_message:
                    type: string
                    example: Author ID does not match user ID
    delete:
      tags:
        - User
      description: Operation to delete a user
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
            example: sloth
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: sloth
                  name:
                    type: string
                    example: siddharth 
                  password:
                    type: string
                    example: passtest
                  created_on:
                    type: string
                    example: 2022-09-19 10:34
        '404':
          description: User not found
          
  /api/user:
    description: End point to create a user.
    post:
      tags:
        - User
      description: Operation to create the user
      requestBody:
        content:
          application/json:
            schema:
              title: user object
              type: object
              properties:
                username:
                  type: string
                  example: sloth
                name:
                  type: string
                  example: siddharth
                password:
                  type: string
                  example: 'pass'
      responses:
        '200':
          description: Successfully created user
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: sloth
                  name:
                    type: string
                    example: siddharth 
                  password:
                    type: string
                    example: pass
                  created_on:
                    type: string
                    example: 2022-09-19 10:34
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                    example: BE1002
                  error_message:
                    type: string
                    example: Password is required

          
  /api/user/follow/{follower}:
    description: End point to follow a user
    post:
      tags:
        - User
      description: Operation to create a follow, URL parameter is follower, provide followed username as POST body, returns followed user. In this example, the request would make lux follow sloth
      parameters:
        - in: path
          name: follower
          required: true
          schema:
            type: string
            example: lux
      requestBody:
        content:
          application/json:
            schema:
              title: user object
              type: object
              properties:
                username:
                  type: string
                  example: sloth
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: sloth
                  name:
                    type: string
                    example: siddharth 
                  password:
                    type: string
                    example: passtest
                  created_on:
                    type: string
                    example: 2022-09-19 10:34
        '400':
          description: Bad request, typically provided user dont exist
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  error_code: 
                    type: string
                    example: BE0001
                  error_message:
                    type: string
                    example: follower does not exist

  /api/user/unfollow/{follower}:
    description: End point to unfollow a user
    post:
      tags:
        - User
      description: Operation to create a unfollow, URL parameter is follower, provide followed username as POST body, returns unfollowed user. In this example, the request would make lux unfollow sloth
      parameters:
        - in: path
          name: follower
          required: true
          schema:
            type: string
            example: lux
      requestBody:
        content:
          application/json:
            schema:
              title: user object
              type: object
              properties:
                username:
                  type: string
                  example: sloth
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: sloth
                  name:
                    type: string
                    example: siddharth 
                  password:
                    type: string
                    example: passtest
                  created_on:
                    type: string
                    example: 2022-09-19 10:34
        '400':
          description: Bad request, typically provided user dont exist
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  error_code: 
                    type: string
                    example: BE0001
                  error_message:
                    type: string
                    example: follower does not exist
        
  
  /api/users/{search_string}:
    description: End point to search for users
    get:
      tags: 
        - User
      description: Operation to search for users
      parameters:
        - in: path
          name: search_string
          required: true
          example: slo
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: user objects
                type: array
                items: 
                  example: 
                   title: user object
                   type: object
                   properties:
                    user_id:
                      type: integer
                      example: 1
                    username:
                      type: string
                      example: sloth
                    name:
                      type: string
                      example: siddharth 
                    password:
                      type: string
                      example: passtest
                    created_on:
                      type: string
                      example: 2022-09-19 10:01
        '400':
          description: No users found
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  error_code: 
                    type: string
                    example: S1
                  error_message:
                    type: string
                    example: No users found
          
  /api/post/{post_id}:
    description: End point to create, read, update a blog post with id
    get:
      tags:
        - Post
      description: Operation to get blog details
      parameters:
        - in: path
          name: post_id
          required: true
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: post object
                type: object
                properties:
                  id:
                    type: integer
                    example: 2
                  author_id:
                    type: integer
                    example: 2
                  title:
                    type: string
                    example: Books
                  description:
                    type: string
                    example: I really like reading books, books are great
                  created_on:
                    type: string
                    example: 2022-12-24 12:17
        '404':
          description: Post not found.
    put:
      tags:
        - Post
      description: Operation to update the post title/caption
      parameters:
        - in: path
          name: post_id
          required: true
          schema:
            type: integer
            example: 2
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                author_id:
                  type: string
                  example: 2
                title:
                  type: string
                  example: Books
                description:
                  type: string
                  example: I dont actually like reading books, sorry
      responses:
        '200':
          description: Successfuly updated.
          content:
            application/json:
              schema:
                title: post object
                type: object
                properties:
                  id:
                    type: integer
                    example: 2
                  author_id:
                    type: integer
                    example: 2
                  title:
                    type: string
                    example: Books
                  description:
                    type: string
                    example: I dont actually like reading books, sorry
                  created_on:
                    type: string
                    example: 2022-12-24 12:17
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                    example: P1
                  error_message:
                    type: string
                    example: Title and caption are missing
        '401':
          description: Forbidden, usually post author id and author_id dont match
          content:
            application/json:
              schema:
                title: post object
                type: object
                properties:
                  error_code: 
                    type: string
                    example: P2
                  error_message:
                    type: string
                    example: Author has not made the post
    delete:
      tags:
        - Post
      description: Operation to delete the post record.
      parameters:
        - in: path
          name: post_id
          required: true
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: Successfully Deleted.
        '404':
          description: Blog does not exist.
  /api/post:
    description: End point to create a post.
    post:
      tags:
        - Post
      description: Operation to create a post
      requestBody:
        content:
          application/json:
            schema:
              title: post object
              type: object
              properties:
                title:
                  type: string
                  example: Fancy post title
                author_id:
                  type: integer
                  example: 2
                description:
                  type: string
                  example: Fancy post description
      responses:
        '200':
          description: Successfully created post
          content:
            application/json:
              schema:
                title: post object
                type: object
                properties:
                  id:
                    type: integer
                    example: 4
                  author_id:
                    type: integer
                    example: 2
                  title:
                    type: string
                    example: Fancy post title
                  description:
                    type: string
                    example: Fancy post description
                  created_on:
                    type: string
                    example: 2022-12-24 12:17
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                    example: P3
                  error_message:
                    type: string
                    example: Title is required
                    
  /api/post/{post_id}/comment:
    description: End point to create comment
    post:
      tags: 
        - Post
      description: Create a post
      requestBody:
        content:
          application/json:
            schema:
              title: comment object
              type: object
              properties:
                content:
                  type: string
                  example: Look at me! Im typing a comment
                author_id:
                  type: integer
                  example: 2
      parameters:
        - in: path
          name: post_id
          required: true
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: comment has been created
          content:
            application/json:
              schema:
                title: comment object
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  author_id:
                    type: integer
                    example: 2
                  post_id:
                    type: integer
                    example: 2
                  content:
                    type: string
                    example: Look at me! Im typing a comment
                  created_at:
                    type: string
                    example: 2022-12-24 12:17
                  
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                    example: C1
                  error_message:
                    type: string
                    example: Invalid Post ID
                    
  /api/post/{post_id}/like:
    description: End point to like/unlike a post
    post:
      tags: 
        - Post
      description: Like/Unlike a post, multiple requests to the same end point will like and unlike the post in that order
      requestBody:
        content:
          application/json:
            schema:
              title: comment object
              type: object
              properties:
                author_id:
                  type: integer
                  example: 2
      parameters:
        - in: path
          name: post_id
          required: true
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: like/unlike a post
          content:
            application/json:
              schema:
                title: comment object
                type: object
                properties:
                  id: 
                    type: integer
                    example: 2
                  author_id:
                    type: integer
                    example: 2
                  post_id:
                    type: integer
                    example: 2
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                    example: L1
                  error_message:
                    type: string
                    example: Invalid author ID  
                
servers:
  - url: http://127.0.0.1:5000
    variables: {}

paths:
  /api/user/{username}:
    description: End point to perform read on user
    get:
      tags:
        - User
      description: Operation to get the user details
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
            example: sloth
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: sloth
                  name:
                    type: string
                    example: siddharth 
                  password:
                    type: string
                    example: passtest
                  created_on:
                    type: string
                    example: 2022-09-19 10:34
        '404':
          description: User not found
    put:
      tags:
        - User
      description: Operation to edit user details
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
            example: sloth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                author_id:
                  type: integer
                  example: 2
                password:
                  type: string
                  example: "newpass"
                username:
                  type: string
                  example: "newsloth"
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: newsloth
                  name:
                    type: string
                    example: siddharth 
                  password:
                    type: string
                    example: newpass
                  created_on:
                    type: string
                    example: 2022-09-19 10:34
        '400':
          description: Bad Request, usually invalid body
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  error_code:
                    type: string
                    example: BE001
                  error_message:
                    type: string
                    example: Invalid Username
        '401':
          description: Forbidden, author ID does not match with user ID
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  error_code:
                    type: string
                    example: BE002
                  error_message:
                    type: string
                    example: Author ID does not match user ID
    delete:
      tags:
        - User
      description: Operation to delete a user
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
            example: sloth
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: sloth
                  name:
                    type: string
                    example: siddharth 
                  password:
                    type: string
                    example: passtest
                  created_on:
                    type: string
                    example: 2022-09-19 10:34
        '404':
          description: User not found
          
  /api/user:
    description: End point to create a user.
    post:
      tags:
        - User
      description: Operation to create the user
      requestBody:
        content:
          application/json:
            schema:
              title: user object
              type: object
              properties:
                username:
                  type: string
                  example: sloth
                name:
                  type: string
                  example: siddharth
                password:
                  type: string
                  example: 'pass'
      responses:
        '200':
          description: Successfully created user
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: sloth
                  name:
                    type: string
                    example: siddharth 
                  password:
                    type: string
                    example: pass
                  created_on:
                    type: string
                    example: 2022-09-19 10:34
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                    example: BE1002
                  error_message:
                    type: string
                    example: Password is required

          
  /api/user/follow/{follower}:
    description: End point to follow a user
    post:
      tags:
        - User
      description: Operation to create a follow, URL parameter is follower, provide followed username as POST body, returns followed user. In this example, the request would make lux follow sloth
      parameters:
        - in: path
          name: follower
          required: true
          schema:
            type: string
            example: lux
      requestBody:
        content:
          application/json:
            schema:
              title: user object
              type: object
              properties:
                username:
                  type: string
                  example: sloth
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: sloth
                  name:
                    type: string
                    example: siddharth 
                  password:
                    type: string
                    example: passtest
                  created_on:
                    type: string
                    example: 2022-09-19 10:34
        '400':
          description: Bad request, typically provided user dont exist
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  error_code: 
                    type: string
                    example: BE0001
                  error_message:
                    type: string
                    example: follower does not exist

  /api/user/unfollow/{follower}:
    description: End point to unfollow a user
    post:
      tags:
        - User
      description: Operation to create a unfollow, URL parameter is follower, provide followed username as POST body, returns unfollowed user. In this example, the request would make lux unfollow sloth
      parameters:
        - in: path
          name: follower
          required: true
          schema:
            type: string
            example: lux
      requestBody:
        content:
          application/json:
            schema:
              title: user object
              type: object
              properties:
                username:
                  type: string
                  example: sloth
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 1
                  username:
                    type: string
                    example: sloth
                  name:
                    type: string
                    example: siddharth 
                  password:
                    type: string
                    example: passtest
                  created_on:
                    type: string
                    example: 2022-09-19 10:34
        '400':
          description: Bad request, typically provided user dont exist
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  error_code: 
                    type: string
                    example: BE0001
                  error_message:
                    type: string
                    example: follower does not exist
        
  
  /api/users/{search_string}:
    description: End point to search for users
    get:
      tags: 
        - User
      description: Operation to search for users
      parameters:
        - in: path
          name: search_string
          required: true
          example: slo
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: user objects
                type: array
                items: 
                  example: 
                   title: user object
                   type: object
                   properties:
                    user_id:
                      type: integer
                      example: 1
                    username:
                      type: string
                      example: sloth
                    name:
                      type: string
                      example: siddharth 
                    password:
                      type: string
                      example: passtest
                    created_on:
                      type: string
                      example: 2022-09-19 10:01
        '400':
          description: No users found
          content:
            application/json:
              schema:
                title: user object
                type: object
                properties:
                  error_code: 
                    type: string
                    example: S1
                  error_message:
                    type: string
                    example: No users found
          
  /api/post/{post_id}:
    description: End point to create, read, update a blog post with id
    get:
      tags:
        - Post
      description: Operation to get blog details
      parameters:
        - in: path
          name: post_id
          required: true
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                title: post object
                type: object
                properties:
                  id:
                    type: integer
                    example: 2
                  author_id:
                    type: integer
                    example: 2
                  title:
                    type: string
                    example: Books
                  description:
                    type: string
                    example: I really like reading books, books are great
                  created_on:
                    type: string
                    example: 2022-12-24 12:17
        '404':
          description: Post not found.
    put:
      tags:
        - Post
      description: Operation to update the post title/caption
      parameters:
        - in: path
          name: post_id
          required: true
          schema:
            type: integer
            example: 2
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                author_id:
                  type: string
                  example: 2
                title:
                  type: string
                  example: Books
                description:
                  type: string
                  example: I dont actually like reading books, sorry
      responses:
        '200':
          description: Successfuly updated.
          content:
            application/json:
              schema:
                title: post object
                type: object
                properties:
                  id:
                    type: integer
                    example: 2
                  author_id:
                    type: integer
                    example: 2
                  title:
                    type: string
                    example: Books
                  description:
                    type: string
                    example: I dont actually like reading books, sorry
                  created_on:
                    type: string
                    example: 2022-12-24 12:17
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                    example: P1
                  error_message:
                    type: string
                    example: Title and caption are missing
        '401':
          description: Forbidden, usually post author id and author_id dont match
          content:
            application/json:
              schema:
                title: post object
                type: object
                properties:
                  error_code: 
                    type: string
                    example: P2
                  error_message:
                    type: string
                    example: Author has not made the post
    delete:
      tags:
        - Post
      description: Operation to delete the post record.
      parameters:
        - in: path
          name: post_id
          required: true
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: Successfully Deleted.
        '404':
          description: Blog does not exist.
  /api/post:
    description: End point to create a post.
    post:
      tags:
        - Post
      description: Operation to create a post
      requestBody:
        content:
          application/json:
            schema:
              title: post object
              type: object
              properties:
                title:
                  type: string
                  example: Fancy post title
                author_id:
                  type: integer
                  example: 2
                description:
                  type: string
                  example: Fancy post description
      responses:
        '200':
          description: Successfully created post
          content:
            application/json:
              schema:
                title: post object
                type: object
                properties:
                  id:
                    type: integer
                    example: 4
                  author_id:
                    type: integer
                    example: 2
                  title:
                    type: string
                    example: Fancy post title
                  description:
                    type: string
                    example: Fancy post description
                  created_on:
                    type: string
                    example: 2022-12-24 12:17
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                    example: P3
                  error_message:
                    type: string
                    example: Title is required
                    
  /api/post/{post_id}/comment:
    description: End point to create comment
    post:
      tags: 
        - Post
      description: Create a post
      requestBody:
        content:
          application/json:
            schema:
              title: comment object
              type: object
              properties:
                content:
                  type: string
                  example: Look at me! Im typing a comment
                author_id:
                  type: integer
                  example: 2
      parameters:
        - in: path
          name: post_id
          required: true
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: comment has been created
          content:
            application/json:
              schema:
                title: comment object
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  author_id:
                    type: integer
                    example: 2
                  post_id:
                    type: integer
                    example: 2
                  content:
                    type: string
                    example: Look at me! Im typing a comment
                  created_at:
                    type: string
                    example: 2022-12-24 12:17
                  
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                    example: C1
                  error_message:
                    type: string
                    example: Invalid Post ID
                    
  /api/post/{post_id}/like:
    description: End point to like/unlike a post
    post:
      tags: 
        - Post
      description: Like/Unlike a post, multiple requests to the same end point will like and unlike the post in that order
      requestBody:
        content:
          application/json:
            schema:
              title: comment object
              type: object
              properties:
                author_id:
                  type: integer
                  example: 2
      parameters:
        - in: path
          name: post_id
          required: true
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: like/unlike a post
          content:
            application/json:
              schema:
                title: comment object
                type: object
                properties:
                  id: 
                    type: integer
                    example: 2
                  author_id:
                    type: integer
                    example: 2
                  post_id:
                    type: integer
                    example: 2
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_code:
                    type: string
                    example: L1
                  error_message:
                    type: string
                    example: Invalid author ID  
                
servers:
  - url: http://127.0.0.1:5000
    variables: {}
